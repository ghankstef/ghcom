<?php 

/*
 * @file 
 * Enables a single blog
 */

define('SINGLE_BLOG_NODE_TYPE', 'story');
define('SINGLE_BLOG_LIST_COUNT', 3);

/*
 * Returns a list of blog queries 
 * 
 *  @param $number
 *     The number of blog entries to retun
 *   @return
 *     A result set object containg a list of blog entries 
 */
function single_blog_list($number) {
  // use the Database API to retun a list of blog posts
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created', 'uid'))
    ->condition('type', SINGLE_BLOG_NODE_TYPE)
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->range(0, $number)
    ->addTag('node_access')
    ->execute();
  
  return $query;
}

/**
 * Implements hook_block_info()
 */

function single_blog_block_info() {
  $blocks = array();
  
  $blocks['recent_blog_posts'] = array(
    'info' => t('Recent Blog Posts'),
  );
  
  return $blocks;
}

/**
 *  Implements hook_block_view()
 */
function single_blog_block_view($delta = '') {
  //Create an empty block
  
  $block = array(
    'subject' => '',
    'content' => '',
  );
  
  if($delta == 'recent_blog_posts') {
    $block['subject'] = t('Recent Blog Posts');
  
    if(user_access('access content')) {
      // retrieve the most recent nodes
      $result = single_blog_list(SINGLE_BLOG_LIST_COUNT);
      
      
      // create items array 
      foreach($result as $node) {
        $items[] = array(
          'data' => array(
            '#theme' => 'single_blog_block_item',
            '#node' => $node,
          ),
          'class' => array('node-' . $node->nid, 'blog-list-item', 'blog-link'),
        );
      }
      
      if(!empty($items)) {
        $block['content']['list'] = array(
          '#theme' => 'item_list__single_blog',
          '#items' => $items,
          '#pre_render' => array('single_blog_item_list_child_render'),
        );
        $block['content']['more'] = array(
          '#theme' => 'more_link',
          '#url' => '',
          '#title' => t('Read more blog entries'),
        );
      }
     
    }
    
  }
  
  return $block;
  
  
}


/*
 * Render each child element in theme_item_list before the data is themed
 */
function single_blog_item_list_child_render($elements) {
  foreach(array_keys($elements['#items']) as $key) {
    if(is_array($elements['#items'][$key]['data'])) {
      $elements['#items'][$key]['data'] = drupal_render($elements['#items'][$key]['data']);
    }
  }
  return $elements;
}


function single_blog_theme($existing, $type, $theeme, $path) {
  return array(
    'single_blog_block_item' => array(
      'variables' => array(
        'node' => NULL,
      ),
      'template' => 'single-blog-block-item', 
    ),
  );
}

function single_blog_preprocess_single_blog_block_item(&$vars) {
  $node = $vars['node'];
  
  $vars['title']= array(
    '#type' => 'link',
    '#title' => $node->title,
    '#href' => 'node/' . $node->nid,
  );
  
  $vars['created'] = $node->created;
  $vars['date'] = format_date($node->created, 'custom', 'F d, Y');
  
  $vars['user'] = user_load($node->uid);
  
  $vars['name'] = theme('username', array('account' => $vars['user']));
  
}